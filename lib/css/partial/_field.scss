.xs {
  flex: 0 0 auto !important;
  width: 3rem !important;
}

.s {
  flex: 0 0 auto !important;
  width: 5rem !important;
}

.m {
  flex: 0 0 auto !important;
  width: 10rem !important;
}

.l {
  flex: 0 0 auto !important;
  width: 15rem !important;
}

.xl {
  flex: 0 0 auto !important;
  width: 20rem !important;
}

.xxl {
  flex: 0 0 auto !important;
  width: 30rem !important;
}

.xs-min {
  min-width: 3rem !important;
}

.s-min {
  min-width: 5rem !important;
}

.m-min {
  min-width: 10rem !important;
}

.l-min {
  min-width: 15rem !important;
}

.xl-min {
  min-width: 20rem !important;
}

.xxl-min {
  min-width: 30rem !important;
}

.ui-field-check {
  padding: ($rem - 1.2)/2 + rem 0;
  display: inline-flex;
  input[type="checkbox"], input[type="radio"] {
    &:not(:checked), &:checked {
      position: absolute;
      left: -9999px;
    }
    &:not(:checked) + label, &:checked + label {
      position: relative;
      cursor: pointer;
      width: 1.2rem;
      height: 1.2rem;
      min-width: 1.2rem;
      min-height: 1.2rem;
      padding: 3px;
      display: block;
    }
    &:not(:checked) + label:before, &:checked + label:before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      border: 1px solid $field-checkbox-border;
      background: $field-checkbox-background;
    }
    &:not(:checked) + label:after, &:checked + label:after {
      content: '';
      display: block;
      width: 100%;
      height: 100%;
      background: $field-checkbox-checked;
      transition: all .2s;
    }
    &:not(:checked) + label:after {
      opacity: 0;
      transform: scale(0);
    }
    &:checked + label:after {
      opacity: 1;
      transform: scale(1);
    }
    &:disabled:not(:checked) + label:before, &:disabled:checked + label:before {
      box-shadow: none;
      border-color: $field-checkbox-disabled-border;
      background-color: $field-checkbox-disabled-background;
    }
    &:checked:focus + label:before, &:not(:checked):focus + label:before {
      border-style: dotted;
      border-color: blue;
    }
  }
  input[type="radio"] {
    &:not(:checked) + label:before, &:checked + label:before {
      @include border-radius(10px);
    }
    &:not(:checked) + label:after, &:checked + label:after {
      @include border-radius(11px);
    }
  }
  .label {
    display: flex;
    span {
      line-height: 1.2rem;
      padding: 0 $prem + rem;
      cursor: default;
    }
  }
  &.disabled {
    opacity: 0.5;
  }
}

.ui-field-input, .ui-field-select {
  display: flex;
  position: relative;
  height: $rem + rem;
  & > .inner {
    position: relative;
    font-weight: normal;
    display: flex;
    height: $rem + rem;
    line-height: $rem + rem; //Firefox Bug - calc on line-height does not work (v48 should fix this)
    line-height: calc(#{$rem + rem} - 2px);
    flex: 1 1 auto;
    @include border-radius($field-input-border-radius);
    @include transition(all 0.5s ease-in-out);
  }
  .ui-loader {
    .loader, .loader:after {
      border-width: 2px;
      width: 16px;
      height: 16px;
      margin: -8px -8px 0 0;
      right: 18px;
    }
  }
}

.ui-field-input {
  .input {
    flex: 1 1 auto;
    position: relative;
    display: flex;
    flex-direction: column;
    background: none;
    border-width: 1px;
    border-style: solid;
    border-color: $field-input-border-top-color $field-input-border-right-color $field-input-border-bottom-color $field-input-border-left-color;
    background: $field-input-background;
    &:first-child {
      @include border-top-left-radius(inherit);
      @include border-bottom-left-radius(inherit);
    }
    &:last-child {
      @include border-top-right-radius(inherit);
      @include border-bottom-right-radius(inherit);
    }
    .separator {
      height: 1px;
      width: 100%;
      position: absolute;
      background: $field-input-focus-separator-color;
      display: block;
      bottom: -1px;
      @include transform(scaleX(0) translateY(0px));
      transform-origin: 50%;
      opacity: 0;
      @include transition(all .2s);
      z-index: 1
    }
    .icon.warning {
      position:absolute;
      width: $rem + rem;
      cursor: pointer;
      height: 100%;
      right: 0;
      top: 0;
      &:not(:hover) {
        @include shake(5s);
      }
      svg use {
        fill: $field-error;
      }
    }
  }
  input, textarea {
    flex: 1 1 0;
    width: 100%;
    border: none;
    background: none;
    padding: calc(#{$prem + rem} - 1px);
    @include transition(all 0.2s ease-in-out);
  }
  & > .inner {
    & > :not(.input) {
      &.icon {
        display: flex;
        flex: 0 0 auto;
      }
      &.prefix.text, &.suffix.text, &.prefix.icon, &.suffix.icon {
        background-color: $field-input-icon-background;
        width: $rem + rem;
        &.text {
          width: auto;
          padding: 0 $prem + rem;
          display: flex;
          align-items: center;
          & > span {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
          }
        }
        border: 1px solid $field-input-icon-border;
        @include border-radius(inherit);
        &.suffix {
          @include border-top-left-radius(0);
          @include border-bottom-left-radius(0);
          border-left: none;
        }
        &.prefix {
          @include border-top-right-radius(0);
          @include border-bottom-right-radius(0);
          border-right: none;
        }
      }
    }
    & > .prefix {
      height: 100%;
      @include border-top-right-radius(0);
      @include border-bottom-right-radius(0);
      border-right: 0;
      & > .inner {
        @include border-top-right-radius(0);
        @include border-bottom-right-radius(0);
        border-right: 0;
        background-color: $field-input-icon-background;
      }
    }
    & > .suffix {
      height: 100%;
      @include border-top-left-radius(0);
      @include border-bottom-left-radius(0);
      border-left: 0;
      & > .inner {
        @include border-top-left-radius(0);
        @include border-bottom-left-radius(0);
        border-left: 0;
        background-color: $field-input-icon-background;
      }
    }
  }
  &:not(.disabled) {
    .icon.clickable {
      background-color: $field-input-icon-background;
      &:hover {
        background: darken($field-input-icon-background, 5%);
        cursor: pointer;
      }
    }
  }
  .input-steps {
    display: flex;
    flex-direction: column;
    .icon {
      width: $rem/2 + rem;
      height: $rem/2 + rem;
      display: flex;
      border: 1px solid $field-input-icon-border;
      border-left: none !important;
      svg {
        padding: 0;
      }
      &:last-child {
        border-top: none;
      }
      &:first-child {
        border-bottom: none;
        svg {
          @include transform(rotate(-180deg));
        }
      }
    }
  }
  &.focus:not(.disabled) {
    & > .inner > .input > input, & > .inner > .input > textarea {
      background: $field-input-focus-background;
      border-color: $field-input-focus-border-top-color $field-input-focus-border-right-color $field-input-focus-border-bottom-color $field-input-focus-border-left-color;
      @include box-shadow($field-input-focus-shadow);
      z-index: 1;
    }
    .separator {
      @include transform(scaleX(1) translateY(0px));
      opacity: 1;
    }
    &.error, &.warning {
      & > .inner > .input > input {
        @include box-shadow($field-input-focus-shadow-warning);
      }
    }
  }
  &.disabled {
    opacity: 0.8;
    & > .inner > .input {
      background: $field-input-disabled-background;
    }
  }
  &.error > .inner > .input, &.warning > .inner > .input {
    border-color: $field-error;
    & > .separator {
      background: $field-error;
    }
  }
  &.date {
    & > .ui-calendar, & > .ui-calendar-picker-range {
      position: absolute;
      right: 0;
      z-index: 1;
      opacity: 0;
      transition: all 0.3s;
    }
    &:not(.top) > .ui-calendar, &:not(.top) > .ui-calendar-picker-range {
      top: $rem + rem;
      @include transform(translate(0, -$rem + rem));
    }
    &.top > .ui-calendar, &.top > .ui-calendar-picker-range {
      bottom: $rem + rem;
      @include transform(translate(0, $rem + rem));
    }
  }
  &.time {
    flex: 0 0 auto !important;
    width: 5rem;
    .separator {
      left: 0;
    }
    .input {
      flex-direction: row;
      display: flex;
      .delimiter {
        display: inline-flex;
        align-items: center;
      }
    }
    input {
      border: none;
      flex: 1 1 auto;
      width: 0;
      &:first-child {
        text-align: right;
      }
    }
  }
  &.textarea {
    min-height: 4*$rem + rem;
    & > .inner {
      height: auto;
      textarea {
        flex: 1 1 auto;
        resize: none;
      }
    }
  }
}
.ui-field-range {
  display:flex;
  flex-direction: column;
  padding-bottom: 2rem;
  .ui-info {
    display:flex;
    flex-direction: row;
    .ui-min, .ui-max {
      flex: 0 0 auto;
      min-width: $prem + rem;
      text-align: center;
      padding: 3px;
      font-size: 0.8 + rem;
    }
    .ui-max {
      margin-left: auto;
    }
  }
  .ui-label {
    display: block;
    width: $field-range-thumb-height + px;
    height: $field-range-thumb-height + px;
    text-align: center;
    position:absolute;
    top: $field-range-thumb-height + px;
    font-weight: bold;
  }
  .ui-track {
    background: $field-range-track-background;
    height: $field-range-height + px;
    display: block;
    position: relative;
    margin: 0 $field-range-thumb-height / 2 + px;
    @include border-radius($field-range-track-radius);
    .ui-progress {
      position: relative;
      width: 20%;
      background: $field-range-progress-background;
      display: block;
      height: 100%;
      @include border-radius(inherit);
      .ui-thumb {
        position: absolute;
        width: $field-range-thumb-height + px;
        height: $field-range-thumb-height + px;
        display: block;
        background: $field-range-thumb-background;
        margin-top: - $field-range-thumb-height / 2 + $field-range-height / 2 + px;
        border-radius: 100%;
        right: - $field-range-thumb-height / 2 + px;
        @include box-shadow($field-range-thumb-shadow);
      }
    }
  }
}
.ui-field-select {
  @include border-radius($field-input-border-radius);
  width: 0;
  &:not(.max) {
    width: 10rem;
  }
  & > .inner {
    max-width: 100%;
    border-width: 1px;
    border-style: solid;
    border-color: $field-input-border-top-color $field-input-border-right-color $field-input-border-bottom-color $field-input-border-left-color;
    background-color: $field-input-background;
    @include border-radius(inherit);
    .ui-select {
      padding: 0 $prem + rem 0 $prem + rem;
      flex: 1 1 auto;
      text-overflow: ellipsis;
      overflow: hidden;
      align-self: center;
      white-space: nowrap;
      display: flex;
      align-items: center;
      & > .icon {
        min-width: $rem + rem;
      }
      & > * {
        white-space: nowrap;
        text-overflow: ellipsis;
      }
    }
  }
  &.error > .inner, &.warning > .inner {
    border-color: $field-error;
  }
  &.disabled > .inner {
    background: $field-select-disabled-background;
    opacity: 0.8;
  }
  &:focus:not(.disabled) {
    z-index: 1;
    & > .inner {
      @include box-shadow($field-input-focus-shadow);
    }
    &.error > .inner, &.warning > .inner {
      @include box-shadow($field-input-focus-shadow-warning);
    }
  }
  & > .inner {
    .icon {
      display: flex;
      svg {
        width: $rem + rem;
        height: $rem + rem;
      }
      &.drop-down {
        min-width: $rem + rem;
        flex: 0;
        svg {
          align-self: center;
          padding: 0.7rem;
        }
      }
      &.warning {
        cursor: pointer;
        &:not(:hover) {
          @include shake(5s);
        }
        svg use {
          fill: $field-error;
        }
      }
    }
  }
  &.loading > .inner {
    .icon {
      display: none;
    }
  }
}

.ui-field-lang {
  display: flex;
  & > div {
    flex: 1 1 auto;
  }
  img {
    flex: 0 0 auto;
    width: $rem + rem;
    height: $rem + rem;
    margin-left: $prem + rem;
  }
}

.ui-tag {
  display:flex;
  flex-direction: row;
  .ui-field-tag {
    border: 1px solid $field-tag-border;
    @include border-radius(5px);
    background: $field-tag-background;
    position: relative;
    float: left;
    display:flex;
    flex-direction: row;
    height: $rem + rem;
    align-items: center;
    .ui-field-tag-inner {
      padding: 0 $prem + rem;
      display: flex;
      color: $field-tag-color;
    }
    a {
      display: flex;
      .icon {
        width: $rem + rem;
        height: $rem + rem;
      }
      &:hover {
        background: darken($field-tag-background, 5%);
      }
    }
  }
}

.ui-file-container {
  & > div {
    position: relative;
    display: inline-flex;
    align-items: center;
    .ui-file-link {
      max-width: 200px;
      text-overflow: ellipsis;
      overflow: hidden;
      max-height: $rem + rem;
      line-height: $rem + rem;
      white-space: nowrap;
    }
    .ui-file-remove {
      display: flex;
      .icon {
        display: flex;
        svg {
          width: $rem + rem;
          height: $rem + rem;
        }
      }
    }
    &:hover {
      font-weight: bold;
    }
    .image-cont {
      margin: $prem + rem;
      display: flex;
      flex-direction: column;
      background: $image-container-background;
      align-items: center;
      padding: $prem/2 + rem;
      & > div {
        padding: $prem + rem;
      }
    }
  }
}

.ui-field-color-choose {
  .outer {
    padding: 3px;
    height: $rem + rem;
    width: $rem + rem;
    float: left;
    margin-right: 0.5rem;
    border: 1px solid $field-color-border;
    &.selected {
      border-color: $field-color-selected-border;
    }
    & > div {
      width: 100%;
      height: 100%;
    }
  }
}

.ui-field-color-picker {
  .outer {
    padding: 3px;
    height: $rem + rem;
    width: $rem + rem;
    float: left;
    margin-right: 0.5rem;
    border: 1px solid $field-color-border;
    &.selected {
      border-color: $field-color-selected-border;
    }
    & > div {
      width: 100%;
      height: 100%;
    }
  }
}

.colorpicker {
  display: inline-block;
  padding: 8px;
  height: 272px;
  .colorpicker-box {
    width: 256px;
    height: 256px;
  }
  .colorpicker-hue {
    width: 32px;
    height: 256px;
    margin-left: 16px;
  }
  .colorpicker-box-pointer {
    width: 20px;
    height: 20px;
  }
  .colorpicker-hue-pointer {
    fill: $color_picker_hue_pointer_color;
    width: 5px;
    height: 8px;
  }
}

.ui-slide {
  position: absolute !important;
  z-index: 1000;
  &.ui-calendar, &.ui-calendar-picker-range {
    display: flex;
    flex-direction: column;
  }
  &.ui-scroll.ui-button-option {
    min-width: 200px;
    max-width: 300px;
    max-height: initial;
    ul {
      min-width: 200px;
      max-width: 300px;
      background: $field-dropdown-background;
      padding: $rem/2 + rem 0;
      overflow: auto;
      overflow-x: hidden;
      li {
        cursor: pointer;
        width: 100%;
        overflow: hidden;
        display: block;
        .ui-button {
          background: none;
          border: none;
          box-shadow: none;
          height: auto;
          width: 100%;
          padding: 0 $prem + rem;
          color: $field-dropdown-color;
          .icon {
            flex: 0 0 auto;
            height: $rem + rem;
            use {
              fill: $field-icon-color;
            }
          }
          .button-title {
            text-overflow: ellipsis;
            overflow: hidden;
          }
        }
      }
      li.current .ui-button:not(.disabled) {
        background: $field-dropdown-current-background !important;
        color: $field-dropdown-current-color;
      }
      li:hover .ui-button:not(.disabled) {
        background: $field-dropdown-hover-background;
      }
    }
  }
  &.ui-scroll {
    display: flex;
    min-width: 100px;
    max-height: calc(8 * #{$rem + rem});
    &.size-9 {
      max-height: calc(9 * #{$rem + rem});
    }
    &.size-10 {
      max-height: calc(10 * #{$rem + rem});
    }
    &.size-11 {
      max-height: calc(11 * #{$rem + rem});
    }
    &.size-12 {
      max-height: calc(12 * #{$rem + rem});
    }
    &.size-13 {
      max-height: calc(13 * #{$rem + rem});
    }
    &.size-14 {
      max-height: calc(14 * #{$rem + rem});
    }
    background: $field-dropdown-background;
    .container {
      flex: 1 0 100%;
    }
    ul.ui-list {
      list-style: none;
      width: 100%;
      li {
        cursor: pointer;
        height: $rem + rem;
        line-height: $rem + rem;
        padding: 0 $prem + rem;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
        width: 100%;
        border-left: 3px solid transparent;
        display: flex;
        align-items: center;
        & > * {
          overflow: hidden;
          text-overflow: ellipsis;
        }
        .icon {
          display: flex;
          width: $rem + rem;
          height: $rem + rem;
          min-width: $rem + rem;
          min-height: $rem + rem;
          margin-left: -$prem + rem;
        }
        &.warning {
          border-color: #FF6060;
        }
      }
      li.current, li.current * {
        background: $field-dropdown-current-background !important;
        color: $field-dropdown-current-color;
      }
      li:hover, li:hover *, li.hover {
        background: $field-dropdown-hover-background;
      }
    }
  }
  opacity: 0;
  &:not(.top) {
    @include transform(translate(0, -$rem + rem));
  }
  &.top {
    @include transform(translate(0, $rem + rem));
  }
  &.show {
    opacity: 1 !important;
    @include transform(translate(0, 0));
    @include transition(all 0.2s ease-in-out);
    @include box-shadow($field-dropdown-shadow);
  }
}